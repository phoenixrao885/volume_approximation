% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/round_polytope.R
\name{round_polytope}
\alias{round_polytope}
\title{Apply rounding to a convex polytope (H-polytope, V-polytope or a zonotope)}
\usage{
round_polytope(P, method)
}
\arguments{
\item{P}{A convex polytope. It is an object from class (a) HPolytope or (b) VPolytope or (c) Zonotope.}

\item{method}{A list that contains parameters for the random walk method.
\itemize{
 \item{WalkT }{A string to declare the random walk method: (a)"hnr" for Hit-and-Run or (b) "bw" for ball walk. Default method is Hit-and-Run.}
 \item{coord }{A boolean parameter for the hit-and-run. True for Coordinate Directions HnR, false for Random Directions HnR. Default value is TRUE.}
 \item{delta }{Optional. The radius for the ball walk.}
 \item{W }{Optional. The number of the steps for the random walk. Default value is \eqn{\lfloor 10+d/10\rfloor}.}
}}
}
\value{
A list with 2 elements: (a) a polytope of the same class as the input polytope class and (b) the element "round_value" which is the determinant of the square matrix of the linear transformation that was applied on the polytope that is given as input.
}
\description{
Given a convex H or V polytope or a zonotope as input this function computes a rounding based on minimum volume enclosing ellipsoid of a pointset.
}
\examples{
# rotate a H-polytope (2d unit simplex)
A = matrix(c(-1,0,0,-1,1,1), ncol=2, nrow=3, byrow=TRUE)
b = c(0,0,1)
P = HPolytope(A=A, b=b)
listHpoly = round_polytope(P)

# rotate a V-polytope (3d cube) using Random Directions HnR
P = GenCube(3, 'V')
ListVpoly = round_polytope(P, method = list("coordinate"=FALSE))

# rotate a 10-dimensional zonotope defined by the Minkowski sum of 20 segments
Z = GenZonotope(4,8)
ListZono = round_polytope(Z)
}
